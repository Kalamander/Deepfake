{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dlib\n",
    "import cv2\n",
    "import os\n",
    "import re\n",
    "import json\n",
    "from pylab import *\n",
    "from PIL import Image, ImageChops, ImageEnhance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('starting code')\n",
    "\n",
    "train_fake_input = 'fake_img'\n",
    "list_of_train_fake_data = [f for f in os.listdir(train_fake_input) if f.endswith('.mp4') or f.endswith('.jpg')]\n",
    "detector = dlib.get_frontal_face_detector()\n",
    "\n",
    "  count = 0\n",

    "for input in list_of_train_fake_data:\n",
    "  if input.endswith('.mp4'):\n",
    "    cap = cv2.VideoCapture(os.path.join(train_fake_input, input))\n",
    "    frameRate = cap.get(5)\n",
    "    while cap.isOpened():\n",
    "      frameId = cap.get(1)\n",
    "      ret, frame = cap.read()\n",
    "      if ret != True:\n",
    "        break\n",
    "      if frameId % ((int(frameRate)+1)*1) == 0:\n",
    "        face_rects, scores, idx = detector.run(frame, 0)\n",
    "        if len(face_rects)>0:\n",
    "            for i, d in enumerate(face_rects):\n",
    "              x1 = d.left()\n",
    "              y1 = d.top()\n",
    "              x2 = d.right()\n",
    "              y2 = d.bottom()\n",
    "              crop_img = frame[y1:y2, x1:x2]\n",
    "              if (crop_img.shape[0] ==0 or crop_img.shape[1]==0 or crop_img.shape[2]==0):\n",
    "                  print(\"skip\")\n",
    "              else:\n",
    "                  cv2.imwrite('dataset/fake/'+input.split('.')[0]+'_'+str(count)+'.png', cv2.resize(crop_img, (128, 128)))\n",
    "                  count+=1\n",
    "  elif input.endswith('.jpg'):\n",
    "    image = cv2.imread(os.path.join(train_fake_input, input))\n",
    "    face_rects, scores, idx = detector.run(image, 0)\n",
    "    if len(face_rects)>0:\n",
    "        for i, d in enumerate(face_rects):\n",
    "            x1 = d.left()\n",
    "            y1 = d.top()\n",
    "            x2 = d.right()\n",
    "            y2 = d.bottom()\n",
    "            crop_img = image[y1:y2, x1:x2]\n",
    "            #print(crop_img.shape)\n",
    "            if (crop_img.shape[0] ==0 or crop_img.shape[1]==0 or crop_img.shape[2]==0):\n",
    "                print(\"skip\")\n",
    "            else:\n",
    "                cv2.imwrite('dataset/fake/'+input.split('.')[0]+'_'+str(count)+'.png', cv2.resize(crop_img, (128, 128)))\n",
    "                count+=1\n",
    "\n",
    "train_real_input ='real_img'\n",
    "list_of_train_real_data = [f for f in os.listdir(train_real_input) if f.endswith('.mp4') or f.endswith('.jpg')]\n",
    "  count = 0\n",

    "for input in list_of_train_real_data:\n",
    "  if input.endswith('.mp4'):\n",
    "    cap = cv2.VideoCapture(os.path.join(train_real_input, input))\n",
    "    frameRate = cap.get(5)\n",
    "    while cap.isOpened():\n",
    "      frameId = cap.get(1)\n",
    "      ret, frame = cap.read()\n",
    "      if ret != True:\n",
    "        break\n",
    "      if frameId % ((int(frameRate)+1)*1) == 0:\n",
    "        face_rects, scores, idx = detector.run(frame, 0)\n",
    "        if len(face_rects)>0:\n",
    "            for i, d in enumerate(face_rects):\n",
    "                x1 = d.left()\n",
    "                y1 = d.top()\n",
    "                x2 = d.right()\n",
    "                y2 = d.bottom()\n",
    "                crop_img = frame[y1:y2, x1:x2]\n",
    "                if (crop_img.shape[0] ==0 or crop_img.shape[1]==0 or crop_img.shape[2]==0):\n",
    "                    print(\"skip\")\n",
    "                else:\n",
    "                    cv2.imwrite('dataset/real/'+input.split('.')[0]+'_'+str(count)+'.png', cv2.resize(crop_img, (128, 128)))\n",
    "                    count+=1\n",
    "  elif input.endswith('.jpg'):\n",
    "    image = cv2.imread(os.path.join(train_real_input, input))\n",
    "    face_rects, scores, idx = detector.run(image, 0)\n",
    "    if len(face_rects)>0:\n",
    "        for i, d in enumerate(face_rects):\n",
    "            x1 = d.left()\n",
    "            y1 = d.top()\n",
    "            x2 = d.right()\n",
    "            y2 = d.bottom()\n",
    "            crop_img = image[y1:y2, x1:x2]\n",
    "            if (crop_img.shape[0] ==0 or crop_img.shape[1]==0 or crop_img.shape[2]==0):\n",
    "                print(\"skip\")\n",
    "            else:\n",
    "                cv2.imwrite('dataset/real/'+input.split('.')[0]+'_'+str(count)+'.png', cv2.resize(crop_img, (128, 128)))\n",
    "                count+=1\n",
    "print(\"done\")\n"

   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
